name: Comprehensive CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 代码格式检查
  formatting:
    name: 🎨 Code Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        
      - name: Install dependencies
        run: uv sync --extra dev
        
      - name: Check formatting with Ruff
        run: |
          echo "Checking code formatting..."
          uv run ruff format --check --diff src/ tests/ examples/

  # 代码质量检查
  linting:
    name: 🔍 Code Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        
      - name: Install dependencies
        run: uv sync --extra dev
        
      - name: Run Ruff linting
        run: |
          echo "Running Ruff linting checks..."
          uv run ruff check src/ tests/ examples/ --output-format=github
          
      - name: Run Pylint
        run: |
          echo "Running Pylint analysis..."
          uv run pylint src/ --rcfile=pylint.toml --output-format=colorized
        continue-on-error: true

  # 类型检查
  type-checking:
    name: 🔎 Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        
      - name: Install dependencies
        run: uv sync --extra dev
        
      - name: Run MyPy type checking
        run: |
          echo "Running MyPy type checking..."
          uv run mypy src/ --show-error-codes --pretty
        continue-on-error: true

  # 安全检查
  security:
    name: 🔒 Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        
      - name: Install dependencies
        run: uv sync --extra dev
        
      - name: Run Bandit security check
        run: |
          echo "Running Bandit security analysis..."
          uv run bandit -r src/ -f json -o bandit-report.json
          uv run bandit -r src/ -f txt
        continue-on-error: true
        
      - name: Run Safety vulnerability check
        run: |
          echo "Checking for known security vulnerabilities..."
          uv run safety check --json --output safety-report.json
          uv run safety check
        continue-on-error: true
        
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # 单元测试
  testing:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        
      - name: Install dependencies
        run: uv sync --extra dev
        
      - name: Create JPlag jar placeholder
        run: |
          mkdir -p lib
          echo "Mock JPlag jar" > lib/jplag-6.2.0.jar
        
      - name: Run tests with coverage
        run: |
          echo "Running unit tests with coverage..."
          uv run pytest tests/ -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --tb=short
            
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.python-version }}
          path: htmlcov/
          retention-days: 30

  # 综合质量检查
  quality-gate:
    name: 🎯 Quality Gate
    runs-on: ubuntu-latest
    needs: [formatting, linting, type-checking, security, testing]
    if: always()
    steps:
      - name: Check quality gate
        run: |
          echo "## 📊 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 Formatting: ${{ needs.formatting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Linting: ${{ needs.linting.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔎 Type Checking: ${{ needs.type-checking.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Testing: ${{ needs.testing.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 检查必需的检查是否通过
          if [[ "${{ needs.formatting.result }}" != "success" ]]; then
            echo "❌ Code formatting check failed!"
            exit 1
          fi
          
          if [[ "${{ needs.linting.result }}" != "success" ]]; then
            echo "❌ Code linting check failed!"
            exit 1
          fi
          
          if [[ "${{ needs.testing.result }}" != "success" ]]; then
            echo "❌ Unit tests failed!"
            exit 1
          fi
          
          echo "✅ All required quality checks passed!"
