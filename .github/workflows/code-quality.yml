name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/pyproject.toml"

    - name: Install dependencies
      run: |
        uv sync --extra dev
        # Install additional linting tools
        uv add --dev pylint mypy bandit safety

    - name: Run Ruff Format Check
      run: |
        echo "🎨 Checking code formatting with Ruff..."
        uv run ruff format --check --diff
      continue-on-error: false

    - name: Run Ruff Linting
      run: |
        echo "🔍 Running Ruff linting..."
        uv run ruff check --output-format=github
      continue-on-error: false

    - name: Run Pylint
      run: |
        echo "🐍 Running Pylint analysis..."
        uv run pylint src/ --output-format=colorized --reports=y --score=y
      continue-on-error: true

    - name: Run MyPy Type Checking
      run: |
        echo "🔎 Running MyPy type checking..."
        uv run mypy src/ --ignore-missing-imports --show-error-codes
      continue-on-error: true

    - name: Run Bandit Security Check
      run: |
        echo "🔒 Running Bandit security analysis..."
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ -f txt
      continue-on-error: true

    - name: Run Safety Vulnerability Check
      run: |
        echo "🛡️ Checking for known security vulnerabilities..."
        uv run safety check --json --output safety-report.json || true
        uv run safety check
      continue-on-error: true

    - name: Run Unit Tests
      run: |
        echo "🧪 Running unit tests..."
        uv run pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing
      continue-on-error: false

    - name: Upload coverage reports to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Upload Bandit Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.json
        retention-days: 30

    - name: Upload Safety Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: safety-vulnerability-report
        path: safety-report.json
        retention-days: 30

    - name: Code Quality Summary
      if: always()
      run: |
        echo "## 📊 Code Quality Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Completed Checks:" >> $GITHUB_STEP_SUMMARY
        echo "- 🎨 **Ruff Format**: Code formatting validation" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 **Ruff Lint**: Code quality and style checks" >> $GITHUB_STEP_SUMMARY
        echo "- 🐍 **Pylint**: Advanced Python static analysis" >> $GITHUB_STEP_SUMMARY
        echo "- 🔎 **MyPy**: Static type checking" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 **Bandit**: Security vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ **Safety**: Dependency vulnerability checking" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 **Pytest**: Unit test execution with coverage" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Quality Gates:" >> $GITHUB_STEP_SUMMARY
        echo "- **Required**: Ruff format, Ruff lint, Unit tests" >> $GITHUB_STEP_SUMMARY
        echo "- **Advisory**: Pylint, MyPy, Bandit, Safety" >> $GITHUB_STEP_SUMMARY
